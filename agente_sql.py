from langchain.agents.agent_toolkits import create_sql_agent
from langchain.sql_database import SQLDatabase
from sqlalchemy import create_engine
from funciones_analisis.funcionalidades_agente import *
import streamlit as st
from langchain.chat_models import ChatOpenAI
import os
from dotenv import load_dotenv
from mplsoccer import PyPizza
import pandas as pd

load_dotenv()

# --- CONFIGURACI√ìN ---
st.set_page_config(page_title="Agente de Scouting", layout="centered")
st.title("‚öΩ Agente Inteligente de Jugadores")

# Crear motor SQLAlchemy
engine = create_engine("postgresql+psycopg2://postgres:1234@localhost:5432/scouting_jugadores")

# Crear objeto SQLDatabase
sql_db = SQLDatabase(engine)

#Descripci√≥n del comportamiento del agente
prefix = """
Eres un agente experto en an√°lisis de jugadores de f√∫tbol. Solo puedes utilizar los datos que se encuentran en la base de datos PostgreSQL conectada.

üóÇÔ∏è Por defecto, deber√°s utilizar las tablas `player_profile`, 'player_stats' y `player_stats_per90` para responder a preguntas sobre jugadores, ya que contienen la informaci√≥n principal de rendimiento y caracter√≠sticas individuales.√ß

Los equipos aparecen en la tabla 'teams', apareciendo unicamente en las tablas de jugadores el "team_id".

**No debes usar conocimiento externo.**
**No debes mencionar a jugadores que no est√©n en la base de datos.**
No inventes informaci√≥n ni valores, y responde solo a partir de los datos reales existentes.

Gu√≠a de traducci√≥n para interpretar posiciones (columna main_position):
- portero ‚Üí goalkeeper
- lateral ‚Üí left back, right back
- defensa central ‚Üí center back
- mediocentro defensivo ‚Üí defensive midfield
- mediocentro ‚Üí center midfield
- mediocentro ofensivo ‚Üí offensive midfield
- extremo ‚Üí winger
- delantero ‚Üí striker

‚ö†Ô∏è No debes usar informaci√≥n que no est√© contenida en las tablas de la base de datos.

Cuando te pregunten, debes:
- Consultar √∫nicamente los datos reales de la base.
- Mostrar como respuesta final solo una tabla con las columnas `player_name`, `team`, `value_eur` y aquellas relacionadas con la pregunta (por ejemplo `goals_scored_per90` si se pregunta por goles).
"""


# --- CARGA DEL LLM Y AGENTE ---
@st.cache_resource
def cargar_agente():
    llm = ChatOpenAI(model="gpt-3.5-turbo", max_tokens=300)
    agent = create_sql_agent(
    llm=llm,
    db=sql_db,
    verbose=False,
    agent_type="openai-functions",
    prefix=prefix
)
    return agent

agent = cargar_agente()

# --- INTERFAZ ---
st.subheader("Hazle una pregunta al agente")

query = st.text_area("‚úçÔ∏è Escribe tu consulta relacionada con los jugadores", height=100)

if st.button("Responder"):
    if query.strip() != "":
        with st.spinner("üí≠ Pensando..."):
            try:
                respuesta = agent.run(query)
                st.success("‚úÖ Consulta completada")
                st.markdown(respuesta)
            except Exception as e:
                st.error(f"‚ùå Ha ocurrido un error: {e}")
    else:
        st.warning("‚ö†Ô∏è Introduce una consulta v√°lida.")


